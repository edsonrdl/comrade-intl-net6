// <auto-generated />
using System;
using Comrade.Persistence.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Comrade.Persistence.Migrations
{
    [DbContext(typeof(ComradeContext))]
    [Migration("20220913181000_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Comrade.Domain.Models.Airplane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("airp_uuid_airplane");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("airp_tx_code");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("airp_tx_model");

                    b.Property<int>("PassengerQuantity")
                        .HasColumnType("int")
                        .HasColumnName("airp_qt_passenger");

                    b.Property<string>("RegisterDate")
                        .IsRequired()
                        .HasColumnType("varchar(48)")
                        .HasColumnName("airp_dt_register");

                    b.HasKey("Id")
                        .HasName("pk_airp_airplane");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_un_airp_tx_code");

                    b.ToTable("airp_airplane");
                });

            modelBuilder.Entity("Comrade.Domain.Models.FinancialInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fiin_uuid_financial_information");

                    b.Property<string>("Card")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("fiin_tx_card");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("fiin_tx_cpf");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("dateTime")
                        .HasColumnName("fiin_dt_dateTime");

                    b.Property<string>("Shop")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("fiin_tx_shop");

                    b.Property<string>("Store")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)")
                        .HasColumnName("fiin_tx_store");

                    b.Property<int>("Type")
                        .HasColumnType("number")
                        .HasColumnName("fiin_nb_type");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fiin_dc_value");

                    b.HasKey("Id")
                        .HasName("pk_fiin_financial_information");

                    b.ToTable("fiin_financial_information");
                });

            modelBuilder.Entity("Comrade.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("syro_uuid_role");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("syro_tx_name");

                    b.HasKey("Id")
                        .HasName("pk_syro_role");

                    b.ToTable("syro_system_role");
                });

            modelBuilder.Entity("Comrade.Domain.Models.SystemPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sype_uuid_system_permission");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sype_tx_name");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sype_tx_tag");

                    b.HasKey("Id")
                        .HasName("pk_sype_system_permission");

                    b.ToTable("sype_system_permission");
                });

            modelBuilder.Entity("Comrade.Domain.Models.SystemUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("syus_uuid_system_user");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("syus_tx_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("syus_tx_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("varchar(1023)")
                        .HasColumnName("syus_pw_password");

                    b.Property<string>("RegisterDate")
                        .HasColumnType("varchar(48)")
                        .HasColumnName("syus_dt_register");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("syus_tx_registration");

                    b.HasKey("Id")
                        .HasName("pk_syus_system_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_un_syus_tx_email")
                        .HasFilter("[syus_tx_email] IS NOT NULL");

                    b.HasIndex("Registration")
                        .IsUnique()
                        .HasDatabaseName("ix_un_syus_tx_registration");

                    b.ToTable("syus_system_user");
                });

            modelBuilder.Entity("RoleSystemPermission", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemPermissionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "SystemPermissionsId");

                    b.HasIndex("SystemPermissionsId");

                    b.ToTable("sype_system_permission_user_syro_role", (string)null);
                });

            modelBuilder.Entity("RoleSystemUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "SystemUsersId");

                    b.HasIndex("SystemUsersId");

                    b.ToTable("syus_system_user_syro_role", (string)null);
                });

            modelBuilder.Entity("SystemPermissionSystemUser", b =>
                {
                    b.Property<Guid>("SystemPermissionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SystemPermissionsId", "SystemUsersId");

                    b.HasIndex("SystemUsersId");

                    b.ToTable("syus_system_user_sype_system_permission", (string)null);
                });

            modelBuilder.Entity("RoleSystemPermission", b =>
                {
                    b.HasOne("Comrade.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comrade.Domain.Models.SystemPermission", null)
                        .WithMany()
                        .HasForeignKey("SystemPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleSystemUser", b =>
                {
                    b.HasOne("Comrade.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comrade.Domain.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("SystemUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SystemPermissionSystemUser", b =>
                {
                    b.HasOne("Comrade.Domain.Models.SystemPermission", null)
                        .WithMany()
                        .HasForeignKey("SystemPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comrade.Domain.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("SystemUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
